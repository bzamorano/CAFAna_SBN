New features for top-level builds:

1) Alternate logging mechanism.

The default SoftRelTools build sends messages to standard output. Here is the
default output when building the Hello package:

-------------------------------------------------
|abacus>gmake                                                                   
<**codegen**>
<**codegen**> Hello
<**include**>
<**include**> Hello
<**lib**>
<**lib**> Hello
<**compiling**> Hello.cc
<**building library**> libHello
<**bin**>
<**bin**> Hello
<**compiling**> HelloExample.cc
<**building**> HelloExample                                                     
-------------------------------------------------

If the new variable USE_LOG_DIR is set, the output of each stage for each
package is sent to a separate file in a subdirectory of the release. Messages
are still sent to the screen to display which stage of which package is being
built, but the output from the build is supressed from the screen.

-------------------------------------------------
|abacus>gmake USE_LOG_DIR=true
<**codegen**>
<**codegen**> Hello
<**include**>
<**include**> Hello
<**lib**>
<**lib**> Hello
<**bin**>
<**bin**> Hello
-------------------------------------------------

The build output has now gone into separate files:

-------------------------------------------------

|abacus>cat build-logs/Hello.lib
<**compiling**> Hello.cc
<**building library**> libHello

|abacus>cat build-logs/Hello.bin
<**compiling**> HelloExample.cc
<**building**> HelloExample                                                     
-------------------------------------------------

This form out the output should be much easier to parse with scripts. It also
produces usable output from parallel builds, where the old output would be
useless.

Interface:
    gmake USE_LOG_DIR=true
(The USE_LOG_DIR variable is only checked via ifdef, so any value will
do.)
    
Modifiers:
    LOG_DIR
is a variable. The default value is "build-logs".

Notes:

    gmake log-clean
    will delete all the files in LOG_DIR.

2) Building previous stages. Currently
    gmake mystage
will only execute the mystage stage of a build. 
-------------------------------------------------
|abacus>gmake bin
<**bin**>
<**bin**> Hello                                                                 
-------------------------------------------------

That could be a feature, or it could
be a bug -- it depends on exactly what is wanted. If the variable
PREVIOUS_STAGES is set,
    gmake mystage
will execute * all * the stages up to and including mystage.
-------------------------------------------------
|abacus>gmake bin PREVIOUS_STAGES=true
<**codegen**>
<**codegen**> Hello
<**include**>
<**include**> Hello
<**lib**>
<**lib**> Hello
<**bin**>
<**bin**> Hello                  
-------------------------------------------------

PREVIOUS_STAGES is set by default when PARALLEL_TOP is set.
