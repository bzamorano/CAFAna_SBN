\documentclass[letterpaper,10pt]{article}
\usepackage{verbatim}
\usepackage{url}
\usepackage{fullpage}

\newcommand{\nova}{NO$\nu$A}
\newcommand{\novas}{\nova \space}

%opening
\title{\nova Soft Documentation - An Idiots Guide}
\author{Paul Sail}



\begin{document}

\maketitle

\begin{abstract}
  This document is in addition to the \nova Soft document that lives on DocDB and is maintained by the current release manager. The idea is to give new release managers a simple ``how to" guide for the main tasks they will be performing, allowing them to jump straight into the job and perform their tasks relatively quickly without having to have an in-depth knowledge of the nova workings immediately.
\end{abstract}

\tableofcontents


\section{Quick Introduction}
 
Taking on the role of release manager for \nova~may sound like a daunting task for anyone unfamiliar with the software structures within the collaboration, so this document aims to provide a quick and simple guide on how to perform certain tasks relevant to the position. This document will not go into large detail about what is going on behind the scenes, this is discussed in the main document, but will try to provide an overview to the new position owner so they can get started immediately. 

\section{General release manager tasks}

The release managers job covers a relatively large number of areas. Primarily these are to maintain the software repository and builds, but also incorporates other software related issues. The general areas and the basic instructions on how to `do' things are provided in the following sections.

\subsection{Obtaining certificate for Jenkins}

To obtain the correct credentials so use Jenkins first visit: \\
\newline
\texttt{http://computing.fnal.gov/authentication/kca/getcert-for-mac.html} \\
\newline
The certificates package can be extracted and run on any Unix/Linux based system, with the produced certificate needed to be imported to web browser being used to access Jenkins. The certificate expires in 7 days, so needs to be renewed and re-imported on a weekly basis.

\subsection{Maintenance of Jenkins \nova Soft builds}

To check the nightly build, make sure your user certificate is up to date and go the the nightly build location on Jenkins at:\\
\newline
\texttt{https://buildmaster.fnal.gov/view/Nova/job/nova\_SRT\_slf6\_nightly\_build/} \\
\newline
If the build has failed, you should look through the list of commits from the previous day to determine who the offending party is and contact them to commit a fix.

\subsection{Tagging releases or ``snapshots"}

Tagging releases or ``snapshots" as they are more commonly known are fairly straightforward to do with previously made scripts that automate the procedure. 
\newline \\
The script \verb|create_release_svn_files.sh| will create all the files necessary for a release and commit them to the subversion repository. This is an example of how to use it:

\begin{verbatim}
ssh novasoft@novabuild01.fnal.gov
cd /build/nova/novasoft/releases/development/SRT_NOVA/scripts/tagging_releases/
./create_release_svn_files.sh -r S15-03-31 -n "Tour Eiffel" -t ~/temp/tagging
\end{verbatim}

\noindent
The options that can be used are:
\begin{itemize}
\item \verb|"-r release"| - where \verb|release| follows the format \verb|SYY_MM_DD|. 
\begin{itemize}
  \item For example \verb|"-r S15-03-31"|
  \end{itemize}
  
\item \verb|"-n `tag name'"| where \verb|tag name| is a colloquial name for the tag. We tend to use an interesting event in history that occurred on the day of the tag, using Wikipedia (other online encyclopaedias are available).

\item \verb|"-t /path/to/temp/directory"| we need a temporary directory to do an svn checkout into, then an svn commit from for the internals of the script to work

\item \verb|"-b"| this switch is deprecated. It was used to create first-analysis tags, but that system is now defunct. DON'T USE IT.

\end{itemize}

\noindent Manual tagging instructions can be found in the main NOvASoft documentation.

\subsection{Making new ``release" branches}

This is a relatively new component of the tagging procedure, and requires making a new ``branch'' in the branch directory (svn doesn't really understand the differences between branches and tags, only directory structures). This branch is effectively a snapshot of the development branch at a particular time but is moved into the branches directory instead of the tags. This branch only has commits specific to the program it is being utilised for (i.e. productions, reconstruction, etc), using a special script called \texttt{svn\_branch\_commit}. This code commits specific bug fixes to the branch, before committing the same update to the development trunk (this). As before, the scripts can be found in: \\
\newline
\texttt{/nova/app/home/novasoft/nightly\_build/SRT\_NOVA/scripts/tagging\_releases}, \\
\newline
with the specific script for automating this being \texttt{create\_newBranch\_svn\_files.sh}. Note: it's very important that the original ``branch" has correctly made nova-offline-ups-externals-name-br(-prof), as well as packages-name-br in the setup directory.\\
\newline
\noindent 
The \texttt{create\_newBranch\_svn\_files.sh} performs two function, making a new special development branch, and tagging off this branch. To make a new special development branch, run a command similar to this: \\
\newline
\texttt{./create\_newBranch\_svn\_files.sh  -t {$\scriptstyle\mathtt{\sim}$}/temp/tagging/ -r specialBranchName -n "information describing branch"} \\

\noindent  \texttt{./create\_newBranch\_svn\_files.sh  -t {$\scriptstyle\mathtt{\sim}$}/temp/tagging/ -r tagName -c branchToTagFrom -n "information describing tag"} \\

\noindent In general the naming convention for the branch follows branchName-br, with the tag following branchName.a. Where the .a increments up with additional tags from the branch.

%create\_newBranch\_svn\_files.sh  -t {$\scriptstyle\mathtt{\sim}$}/temp/tagging -r S15-05-04-br -c S15-05-04b -n "Another hotfix"

%create\_newBranch\_svn\_files.sh  -t {$\scriptstyle\mathtt{\sim}$}/temp/tagging -r FA14-10-03x.e -c FA14-10-03x-br -n "Create new tagged release from FA14-10-03x-br"

%create\_newBranch\_svn\_files.sh -r R15-11-17-miniprod -n "MiniProduction 11-17-15" -v 16794 -t ~/temp/tagging

%Always make sure that trunk has a proper packages update, otherwise the build fails.
%\\
%-make sure setup scripts are in the correct places (some don't make).


\subsection{Updating CVMFS}

The updating of software tools isn't explicitly documented, but generally falls under the "UPS" section of \nova SoftDocu. To update packages on CVMFS do the following: \\

\noindent 1. Log in to CVMFS \\
\newline
\texttt{ssh -l cvmfsnova oasiscfs02.fnal.gov} \\

\noindent 2. Put the CVMFS server into``transaction" \\
\newline
\texttt{nova\_cvmfs\_transaction} \\

\noindent 3. Setup the local UPS database on the CVMFS server \\
\newline
\texttt{source /cvmfs/nova.opensciencegrid.org/externals/setup} \\

\noindent 4. Confirm which versions of NovaGridUtils have been installed in the local UPS database \\
\newline
\texttt{ups list -aK+ NovaGridUtils} \\

\noindent 5. Setup UPD to install the new version of NovaGridUtils using UPD \\
\newline
\texttt{setup upd} \\

\noindent 6. Check which versions of NovaGridUtils are available via UPD \\
\newline
\texttt{upd list -aK+ NovaGridUtils} \\

\noindent 7. Install the new version to the local UPS data base \\
\newline
\texttt{upd install NovaGridUtils v0X.YZ} \\

\noindent 8. Double check that the local UPS database now has that version installed \\
\newline
\texttt{ups list -aK+ NovaGridUtils} \\

\noindent 9. Declare the new version of NovaGridUtils as the "current" version in the local UPS database (means that this is the version you get if you try to "setup" without specifying a version) \\
\newline
\texttt{ups declare -c NovaGridUtils v0X.YZ} \\

\noindent 10. Publish the changes to the CVMFS repository on the server \\
\newline
\texttt{nova\_cvmfs\_publish} \\
  
\noindent When using transaction and publish command, users should be in ``screen''  mode, as cvmfs issues have arisen when accidental disconnections have occurred. Use ``\texttt{screen -ls}'' to check if screens are currently active, then perform session in ``\texttt{screen -S job1'}'.
  
\subsection{Backporting and Hotfixing eleases}

Backporting and Hotfixing of releases has been discontinued, with the new method of producing special development branches and tags superseding this.
  
\subsection{Updating packages for gpvm and cvmfs} 
 
To update packages on gpvm and cvmfs for releases, it must first be determined where the packages live. In general these can be found on scisoft:\\
\newline
\texttt{https://scisoft.fnal.gov/scisoft/packages/} \\
\newline
The products then need to be installed in the relevant directories on both gpvm and cvmfs, the locations for these are:\\
\newline
\texttt{gpvm: /grid/fermiapp/products/nova/externals/} \\
\newline
\texttt{cvmfs: /cvmfs/nova.opensciencegrid.org/externals/} \\
\newline
To install the packages in the correct place, move to the /temp/ directory on the relevant system and use something like: \\
\newline
\texttt{wget https://scisoft.fnal.gov/scisoft/packages/package/package-slf6-x86\_64-e9-debug.tar.bz2 .} \\
\newline
This should download the package to the temp directory where it will do no harm if a mistake has been made. This process should be done for both slf6 debug and prof versions of the package. Once the packages have been downloaded to temp, they can now be unpacked and installed. To do this, move into the main externals directory and simply do:\\
\newline
\texttt{tar -xvf temp/package-slf6-x86\_64-e9-debug.tar.bz2} \\
\newline
Once all packages have been unpacked and installed the files located in temp can be removed, and the installation procedure must be documented in the LOG file in the externals directory.

\subsection{Creating new lid (PID) package}
 
 This needs to be done on the novabuild machine using the novasoft permissions, use ``ksu novasoft". On the novabuild machine setup a directory in the \texttt{$\sim$/user\_dirs} area to hold all the pid library files. These library files can be copied from the \texttt{LID\_LIB\_PATH=/nova/data/pidlibs/products/lid/v01.0x/NULL//lib} area into the temporary directory made, i.e. \texttt{lid\_testVersion}. \\
 Once the library files have been copied and edited in the relevant temp directory, move to the directory \texttt{nightly\_build/SRT\_NOVA/scripts} directory, and run the \texttt{make\_pidlib\_product.sh} script with the following arguments: \\
 
\noindent \texttt{make\_pidlib\_product.sh /path/to/libraryfiles package\_name version\_to\_make}\\
 
\noindent This should then make and declare the new package to ups/upd, although it will need to still be pulled through to cvmfs.
 
\subsection{Updating \nova Soft} 

Upgrading \nova Soft versions is generally done by upgrading to a new specified version of nutools, found here: \\
\newline
\texttt{https://scisoft.fnal.gov/scisoft/bundles/nu/} \\
\newline
The simplest component is to install the packages required for the upgrade, this can be done using the instructions provided in the html file. Once this is done, further information can be sourced from previous release managers.
 

\end{document}
