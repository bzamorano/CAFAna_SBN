#!/bin/bash

if [ -z "$EXTERNALS" ]; then
    echo 'Please set the $EXTERNALS environmental variable before running this script.'
    echo 'If you are using this script as a first time import of externals make youreself a directory and set the $EXTERNALS variable.'
    exit 1
fi

# An offsite maintainer might have a different local username than the FNAL kerberos principal
# Can change this variable to allow kerberized scp
script_user=`whoami`
novavmhost='novagpvm04.fnal.gov'
fnalvm="$script_user@$novavmhost"

cd ${EXTERNALS}
mkdir tars
cd tars

# get the pull script
wget http://scisoft.fnal.gov/scisoft/bundles/tools/pullProducts
chmod +x pullProducts

for os in slf5 slf6;
do
  for build in debug prof
    do
    ./pullProducts ${EXTERNALS} ${os} nu-v1_11_01 s11-e7 ${build}
  done
done

# pull novadaq tars
remote_location=http://scisoft.fnal.gov/scisoft/packages/novadaq/v03_00_12
for os in slf5 slf6
do
  for build in debug prof
  do
    cd ${EXTERNALS}/tars
    tarball=novadaq-03.00.12-${os}-x86_64-e7-${build}.tar.bz2
    if [ ! -e $tarball ];then
      wget ${remote_location}/${tarball}
      cd ${EXTERNALS}
      tar xf tars/${tarball}
    fi
  done 
done

# pull novadaqdeps - a wrapper product to setup align versions of novadaq and novaddt
remote_location=http://scisoft.fnal.gov/scisoft/packages/novadaqdeps/v01_00_03
cd ${EXTERNALS}/tars
tarball=novadaqdeps-01.00.03-noarch.tar.bz2
if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
fi

# pull novaddt tars 
remote_location=http://scisoft.fnal.gov/scisoft/packages/novaddt/v03_01_02
for os in slf5 slf6
do
  for build in debug prof
  do
    cd ${EXTERNALS}/tars
    tarball=novaddt-03.01.02-${os}-x86_64-e7-${build}.tar.bz2
    if [ ! -e $tarball ];then
      wget ${remote_location}/${tarball}
      cd ${EXTERNALS}
      tar xf tars/${tarball}
    fi
  done
done


# pull Valgrind
for os in slf5 slf6
do
  remote_location=http://scisoft.fnal.gov/scisoft/packages/valgrind/v3_10_1
  tarball=valgrind-3.10.1-${os}-x86_64.tar.bz2
  cd ${EXTERNALS}/tars
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
  fi
done



# pull cppcheck v1_63
if [ ! -e ${EXTERNALS}/cppcheck/v1_63 ];then

    cd ${EXTERNALS}/tars
    tarball=cppcheck-v1_63.tar.gz
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}

fi

# pull psycopg2 v2_5_p2_7
if [ ! -e ${EXTERNALS}/psycopg2/v2_5_p2_7 ];then

    cd ${EXTERNALS}/tars
    tarball=psycopg2_v2_5_p2_7.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}

fi

# pull Total view v8_9_0a
if [ ! -e ${EXTERNALS}/totalview/v8_9_0a ];then
    cd $EXTERNALS/tars
    wget http://scisoft.fnal.gov/scisoft/packages/totalview/v8_9_0a/totalview-8.9.0a-Linux.tar.gz
    cd $EXTERNALS
    tar -xf tars/totalview-8.9.0a-Linux.tar.gz
fi

# pull gdb v7_9
if [ ! -e ${EXTERNALS}/gdb/v7_9 ];then
    cd ${EXTERNALS}/tars
    tarball=gdb_v7_9.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}
fi

# pull valgrind v3_10_1
if [ ! -e ${EXTERNALS}/valgrind/v3_10_1 ];then
    cd ${EXTERNALS}/tars
    tarball=valgrind_v3_10_1.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}
fi


cd $EXTERNALS

# First time install should first download upd product
# Used to be part of the ups install, probably an oversight in the newest version.
if [ ! -d "upd" ]; then
  cd ${EXTERNALS}/tars
  remote_location=http://scisoft.fnal.gov/scisoft/packages/upd/v5_0_1
  tarball=upd-5.0.1-noarch.tar.bz2
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
  fi

  cd ${EXTERNALS}/tars
  remote_location=http://scisoft.fnal.gov/scisoft/packages/upd/v5_0_1
  tarball=upd-5.0.1-source.tar.bz2
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
  fi

  cd $EXTERNALS

  tar xf tars/upd-5.0.1-source.tar.bz2
fi



source $EXTERNALS/setup
setup upd

echo "Installing products via UPD"

upd install lid		                       v01.01  #Bumped to v01.01 on 2015/05/18
upd install eid		                       v01.00
upd install hmatrix	                       v01.00
upd install lemlittle	                       v01.03  #Bumped to v01.03 on 2015/05/18
upd install qepid	                       v01.01
upd install remid	                       v01.02
upd install ucana	                       v01.03
upd install rvp                                 v01.00
upd install calibcsvs                           v07.01
upd install -G "-c" sam_web_client              v1_9
upd install -G "-c" fife_utils                  v2_5
upd install -G "-c" jobsub_tools                v1_3_1_1_3
upd install -G "-c" jobsub_client               v1_1_0_2
upd install         jobsub_client               v1_1_1    #Needed by Jeny Teheran for Calibration Keep up
upd install         python                      v2_7_3    #Needed by jobsub_client v1_1_1 and not installed by upd
upd install condb                               v2_0b
upd install -G "-c" NovaGridUtils               v01.39
upd install FANN v2.2.0 -f Linux64bit+2.6-2.5
upd install FANN v2.2.0 -f Linux64bit+2.6-2.12

#jobsub_client seems to use a non-standard way to require pycurl, hence the upd install does not pull
#pycurl in as dependency
#manually install them
upd install -G "-c" pycurl v7_15_5 -H Linux64bit+2.6-2.5
upd install -G "-c" pycurl v7_16_4 -H Linux64bit+2.6-2.12


#JPD - We need to make sure that the versions of products we try to declare as current are in fact declare as current
#source ${EXTERNALS}/setup #No need to do this, we already setup in the UPD stage

echo "Setting \"current\" versions of products in local UPS database"
ups declare -c  sam_web_client              v1_9
ups declare -c  fife_utils                  v2_5
ups declare -c  jobsub_tools                v1_3_1_1_3
ups declare -c  jobsub_client                
ups declare -c  NovaGridUtils               v01.39

#JPD - Install the built release from Jenkins
SLF5_BUILD_NUM=56
SLF6_BUILD_NUM=67
RELEASE=S15-06-30

#Necessary function
function get_release_from_jenkins(){

    os=$1
    OS=$2
    RELEASE=$3
    THIS_BUILD_NUM=$4
    DESTINATION=$5
    
    mkdir $DESTINATION/temp
    cd $DESTINATION/temp

    for build in debug maxopt;
    do
	TARBALL=novabuild.${RELEASE}.${OS}.${build}.tar.bz2    
	URL=https://buildmaster.fnal.gov/view/Nova/job/nova_SRT_${os}_release_build_output/${THIS_BUILD_NUM}/artifact/buildout/${TARBALL}

	echo "INFO: Downloading release from URL \"$URL\""
	wget --no-check-certificate $URL &> /dev/null
	RETVAL=$?
	if [ "$RETVAL" != 0 ];then
	   echo "ERROR: Getting tarball from Jenkins with URL \"$URL\""
	   return 1
	fi
	echo "INFO: Un-tarring downloaded release tarball \"$TARBALL\""
	tar -xjf $TARBALL
	RETVAL=$?
	if [ "$RETVAL" != 0 ];then
	   echo "ERROR: Getting untarring release tarball \"$TARBALL\""
	   return 1
	fi
	
    done
    if [ -d $DESTINATION/$RELEASE ];then
	echo "ERROR: Release \"$RELEASE\" Already exists in destination \"$DESTINATION\""
	return 1
    fi
    cp -r $RELEASE $DESTINATION/
    rm $DESTINATION/temp/$TARBALL

    return 0
}

#Actually install
if [  -z "$NOVA_INSTALL_SLF5" ];then
    echo "INFO:  \"\$NOVA_INSTALL_SLF5\" not set. Not installing the (slf5 built) software from Jenkins tarball"
else
    if [ ! -d "$NOVA_INSTALL_SLF5" ];then
	echo "ERROR: \"\$NOVA_INSTALL_SLF5\" directory doesn't exist, BAILING"
	exit 1
    fi

    get_release_from_jenkins slf5 SLF5 $RELEASE $SLF5_BUILD_NUM $NOVA_INSTALL_SLF5
    
fi

if [  -z "$NOVA_INSTALL_SLF6" ];then
    echo "INFO:  \"\$NOVA_INSTALL_SLF6\" not set. Not installing the (slf6 built) software from Jenkins tarball"
else
    if [ ! -d "$NOVA_INSTALL_SLF6" ];then
	echo "ERROR: \"\$NOVA_INSTALL_SLF6\" directory doesn't exist, BAILING"
	exit 1
    fi

    get_release_from_jenkins slf6 SLF6 $RELEASE $SLF6_BUILD_NUM $NOVA_INSTALL_SLF6

fi
