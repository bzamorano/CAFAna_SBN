#!/bin/bash

if [ -z "$EXTERNALS" ]; then
    echo 'Please set the $EXTERNALS environmental variable before running this script.'
    echo 'If you are using this script as a first time import of externals make youreself a directory and set the $EXTERNALS variable.'
    exit 1
fi

# An offsite maintainer might have a different local username than the FNAL kerberos principal
# Can change this variable to allow kerberized scp
script_user=`whoami`
novavmhost='novagpvm04.fnal.gov'
fnalvm="$script_user@$novavmhost"

cd ${EXTERNALS}
mkdir tars
cd tars

# get the pull script
wget http://scisoft.fnal.gov/scisoft/bundles/tools/pullProducts
chmod +x pullProducts

for os in slf5 slf6;
do
  for build in debug prof
    do
    ./pullProducts ${EXTERNALS} ${os} nu-v1_09_01 s7-e7 ${build}
  done
done

# pull novadaq tars
remote_location=http://scisoft.fnal.gov/scisoft/packages/novadaq/v03_00_09
for os in slf5 slf6
do
  for build in debug prof
  do
    cd ${EXTERNALS}/tars
    tarball=novadaq-03.00.09-${os}-x86_64-e7-${build}.tar.bz2
    if [ ! -e $tarball ];then
      wget ${remote_location}/${tarball}
      cd ${EXTERNALS}
      tar xf tars/${tarball}
    fi
  done 
done

# pull novadaqdeps - a wrapper product to setup align versions of novadaq and novaddt
remote_location=http://scisoft.fnal.gov/scisoft/packages/novadaqdeps/v01_00_00
cd ${EXTERNALS}/tars
tarball=novadaqdeps-01.00.00-noarch.tar.bz2
if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
fi

# pull novaddt tars 
remote_location=http://scisoft.fnal.gov/scisoft/packages/novaddt/v03_00_11
for os in slf5 slf6
do
  for build in debug prof
  do
    cd ${EXTERNALS}/tars
    tarball=novaddt-03.00.11-${os}-x86_64-e7-${build}.tar.bz2
    if [ ! -e $tarball ];then
      wget ${remote_location}/${tarball}
      cd ${EXTERNALS}
      tar xf tars/${tarball}
    fi
  done
done


# pull Valgrind
for os in slf5 slf6
do
  remote_location=http://scisoft.fnal.gov/scisoft/packages/valgrind/v3_10_1
  tarball=valgrind-3.10.1-${os}-x86_64.tar.bz2
  cd ${EXTERNALS}/tars
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}/tars
    tar xf tars/${tarball}
  fi
done



# pull cppcheck v1_63
if [ ! -e ${EXTERNALS}/cppcheck/v1_63 ];then

    cd ${EXTERNALS}/tars
    tarball=cppcheck-v1_63.tar.gz
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}

fi

# pull psycopg2 v2_5_p2_7
if [ ! -e ${EXTERNALS}/psycopg2/v2_5_p2_7 ];then

    cd ${EXTERNALS}/tars
    tarball=psycopg2_v2_5_p2_7.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}

fi

# pull Total view v8_9_0a
if [ ! -e ${EXTERNALS}/totalview/v8_9_0a ];then
    cd $EXTERNALS/tars
    wget http://scisoft.fnal.gov/scisoft/packages/totalview/v8_9_0a/totalview-8.9.0a-Linux.tar.gz
    cd $EXTERNALS
    tar -xf tars/totalview-8.9.0a-Linux.tar.gz
fi

# pull gdb v7_8
if [ ! -e ${EXTERNALS}/gdb/v7_8 ];then
    cd ${EXTERNALS}/tars
    tarball=gdb_v7_8.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}
fi

# pull valgrind v3_10_1
if [ ! -e ${EXTERNALS}/valgrind/v3_10_1 ];then
    cd ${EXTERNALS}/tars
    tarball=valgrind_v3_10_1.tar.bz2
    wget http://nusoft.fnal.gov/nova/users/jpdavies/$tarball
    cd ${EXTERNALS}
    tar -xf tars/${tarball}
fi


cd $EXTERNALS

# First time install should first download upd product
# Used to be part of the ups install, probably an oversight in the newest version.
if [ ! -d "upd" ]; then
  cd ${EXTERNALS}/tars
  remote_location=http://scisoft.fnal.gov/scisoft/packages/upd/v5_0_1
  tarball=upd-5.0.1-noarch.tar.bz2
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
  fi

  cd ${EXTERNALS}/tars
  remote_location=http://scisoft.fnal.gov/scisoft/packages/upd/v5_0_1
  tarball=upd-5.0.1-source.tar.bz2
  if [ ! -e $tarball ];then
    wget ${remote_location}/${tarball}
    cd ${EXTERNALS}
    tar xf tars/${tarball}
  fi

  cd $EXTERNALS

  tar xf tars/upd-5.0.1-source.tar.bz2
fi



source $EXTERNALS/setup
setup upd

echo "Installing products via UPD"

upd install lid		                        v01.01 #Bumped for this hot-fix
upd install eid		                        v01.00
upd install hmatrix	                        v01.00
upd install lemlittle	                        v01.02
upd install qepid	                        v01.00
upd install remid	                        v01.00
upd install ucana	                        v01.03
upd install rvp                                 v01.00
upd install calibcsvs                           v07.01 #Bumped for this hotfix
upd install -G "-c" sam_web_client              v1_9
upd install -G "-c" fife_utils                  v2_5
upd install -G "-c" jobsub_tools                v1_3_1_1_3
upd install -G "-c" jobsub_client               v1_1_0_2
upd install condb                               v2_0b
upd install -G "-c" NovaGridUtils               v01.29

#jobsub_client seems to use a non-standard way to require pycurl, hence the upd install does not pull
#pycurl in as dependency
#manually install them
upd install -G "-c" pycurl v7_15_5 -H Linux64bit+2.6-2.5
upd install -G "-c" pycurl v7_16_4 -H Linux64bit+2.6-2.12


#JPD - We need to make sure that the versions of products we try to declare as current are in fact declare as current
#source ${EXTERNALS}/setup #No need to do this, we already setup in the UPD stage

echo "Setting \"current\" versions of products in local UPS database"
ups declare -c  sam_web_client              v1_9
ups declare -c  fife_utils                  v2_5
ups declare -c  jobsub_tools                v1_3_1_1_3
ups declare -c  jobsub_client               v1_1_0_2
ups declare -c  NovaGridUtils               v01.29

