<?xml version='1.0' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.6">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.redmine.RedmineProjectProperty plugin="redmine@0.15">
      <redmineWebsiteName>Fermilab Redmine</redmineWebsiteName>
      <projectName>nova-cvs</projectName>
    </hudson.plugins.redmine.RedmineProjectProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.37">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NOVADAQVER</name>
          <description></description>
          <defaultValue>v10_01_00</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NOVADAQDEPS_VER</name>
          <description></description>
          <defaultValue>v02_04_02</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <matrixOptions>
        <throttleMatrixBuilds>true</throttleMatrixBuilds>
        <throttleMatrixConfigurations>false</throttleMatrixConfigurations>
      </matrixOptions>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>swarm</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>BUILDTYPE</name>
      <values>
        <string>debug</string>
        <string>prof</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label1</name>
      <values>
        <string>SLF6</string>
        <string>Yosemite</string>
      </values>
    </hudson.matrix.LabelAxis>
    <hudson.matrix.TextAxis>
      <name>EQUAL</name>
      <values>
        <string>e7</string>
        <string>e9</string>
      </values>
    </hudson.matrix.TextAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
cd $WORKSPACE
rm -rfv $WORKSPACE/buildout
mkdir -p $WORKSPACE/buildout
rm -rf buildtemp
mkdir -p buildtemp

depver=${NOVADAQDEPS_VER//v}
depver=${depver//_/.}
buildqual=${BUILDTYPE/_/:}
export NOVADEPFILE=&quot;novadaqdeps-${depver}-noarch.tar.bz2&quot;

dorp=&quot;-d&quot;
if [ &quot;${BUILDTYPE/debug}&quot; = &quot;${BUILDTYPE}&quot; ]; then
   dorp=&quot;-p&quot;
fi

echo &quot;BUILDTYPE is ${BUILDTYPE}&quot;
echo &quot;setting the build  qualifier to ${dorp}&quot;

cd ${WORKSPACE}/buildtemp
export TOPLEV=${WORKSPACE}/buildtemp
mkdir localProducts
mkdir src
mkdir build
export SRCDIR=${TOPLEV}/src
export BUILDDIR=${TOPLEV}/build
export LOCALPROD=${TOPLEV}/localProducts

echo &quot;TOPLEV is ${TOPLEV}&quot;
echo &quot;BUILDDIR is ${BUILDDIR}&quot;
echo &quot;SRCDIR is ${SRCDIR}&quot;
echo &quot;LOCALPROD is ${LOCALPROD}&quot;

# check out the products necessary for building - this allows us to build on OS X as well

# determine the build flavor, use the /grid/fermiapp products for the LINUX builds, pull the products
# for the Darwin build
OS=`uname`
if [ &quot;${OS}&quot; = &quot;Linux&quot; ]
then
  flvr=slf`lsb_release -r | sed -e &apos;s/[[:space:]]//g&apos; | cut -f2 -d&quot;:&quot; | cut -f1 -d&quot;.&quot;`
#  source /grid/fermiapp/products/nova/externals/setup
#  cp -R /grid/fermiapp/products/nova/externals/.upsfiles ${LOCALPROD}
#  export PRODUCTS=${LOCALPROD}:${PRODUCTS}
elif [ &quot;${OS}&quot; = &quot;Darwin&quot; ]
then
  flvr=d`uname -r | cut -f1 -d&quot;.&quot;`
    
else 
  echo &quot;ERROR: unrecognized operating system ${OS}&quot;
  exit 1
fi
echo &quot;build flavor is ${flvr}&quot;
echo &quot;&quot;

# setup the local products directory
cd ${LOCALPROD}

if [ &quot;${EQUAL}&quot; = &quot;e7&quot; ]
then
  export NUVER=v1_14_02
  export SQUAL=s15
  export BUILDTOOLSVVER=v5_04_02
  export BUILDTOOLSVER=5.04.02
  export CMAKEVVER=v3_5_1
  export CMAKEVER=3.5.1
  echo &quot;get cetbuildtools&quot;
  
  #pull the necessary cetbuildtools and cmake versions to be sure we get it for the e7 build as well
  curl --location --insecure -O http://scisoft.fnal.gov/scisoft/packages/cetbuildtools/${BUILDTOOLSVVER}/cetbuildtools-${BUILDTOOLSVER}-noarch.tar.bz2 || exit 1
  tar -xf cetbuildtools-${BUILDTOOLSVER}-noarch.tar.bz2
  rm cetbuildtools-${BUILDTOOLSVER}-noarch.tar.bz2
  echo &quot;get cmake&quot;
  curl --location --insecure -O  http://scisoft.fnal.gov/scisoft/packages/cmake/${CMAKEVVER}/cmake-${CMAKEVER}-${flvr}-x86_64.tar.bz2 || exit 1
  tar -xf cmake-${CMAKEVER}-${flvr}-x86_64.tar.bz2
  rm cmake-${CMAKEVER}-${flvr}-x86_64.tar.bz2
  echo &quot;finish special pull for cetbuildtools and cmake&quot;
elif [ &quot;${EQUAL}&quot; = &quot;e9&quot; ]
then
  export NUVER=v1_21_01
  export SQUAL=s28
fi  

curl --fail --silent --location --insecure -O http://scisoft.fnal.gov/scisoft/bundles/tools/pullProducts || exit 1
chmod +x pullProducts

# pull the nu products so that we have the correct version of gcc and ups
./pullProducts ${LOCALPROD} ${flvr} nu-${NUVER} ${SQUAL}-${EQUAL} ${BUILDTYPE} 

cd ${TOPLEV}
source ${LOCALPROD}/setup

svn co http://cdcvs.fnal.gov/subversion/novaart-novadaqdeps/tags/${NOVADAQDEPS_VER} novadaqdeps
tar -cjf ${NOVADEPFILE} novadaqdeps/
rm -rf novadaqdeps
cp -pv $PWD/${NOVADEPFILE} ${LOCALPROD}/
if [ &quot;${dorp}&quot; == &quot;-d&quot; -a &quot;${EQUAL}&quot; == &quot;e10&quot; ]; then
 cp -pv ${NOVADEPFILE} ${WORKSPACE}/buildout
fi  
rm *.bz2

# put novadaqdeps into the local products directory
cd ${LOCALPROD}
tar -xf ${NOVADEPFILE}

ls ${LOCALPROD}
echo &quot;ups products are in ${PRODUCTS}&quot;

cd ${SRCDIR}             
cvs -d :pserver:anonymous@cdcvs.fnal.gov:/cvs/nova checkout -d novadaqups Online/pkgs/ups
sh  novadaqups/bootstrap.sh $PWD
rm -rf novadaqups
mv novadaq/${NOVADAQVER}/cet cet
rm -rf novadaq
mv cet novadaq
cd ${BUILDDIR}  
source ${SRCDIR}/novadaq/ups/setup_for_development ${dorp} ${EQUAL}
buildtool -j8 -p

if [ &quot;${dorp}&quot; == &quot;-d&quot; ] &amp;&amp; [ &quot;${OS}&quot; = &quot;Darwin&quot; ]; then
  # make a source code tarball
  novadaqdotver=`echo ${NOVADAQVER} | sed -e &apos;s/_/./g&apos; | sed -e &apos;s/^v//&apos;`
  tar -cf novadaq-${novadaqdotver}-source.tar ${SRCDIR}/novadaq
  bzip2 novadaq-${novadaqdotver}-source.tar
fi

cp -pv $PWD/novadaq*.tar.bz2 $WORKSPACE/buildout

# clean up after ourselves - there are about 10 GB of files in ${LOCALPROD}
rm -rf ${LOCALPROD}

#exit 0
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>buildout/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.BuildTrigger>
      <childProjects>novadaq_build_output</childProjects>
      <threshold>
        <name>FAILURE</name>
        <ordinal>2</ordinal>
        <color>RED</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
  </publishers>
  <buildWrappers/>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>