# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions
alias mv='nova_cvmfs_safe_mv'

# Print instructions to user
cat ~/INSTRUCTIONS

export CVMFS_DISTRO_BASE=/cvmfs/nova.opensciencegrid.org/
#export REPO_NAME=nova.opensciencegrid.org



# Wrapper for cvmfs_server commands
# Why? Because we need to stop people using 'mv' whilst a transaction is ongoing
function nova_cvmfs_safe_mv(){
    echo mv breaks things: mv "$@" >&2
}

function nova_cvmfs_check(){
    local TRANSACTION_FILE=~/.nova_server_transaction
    if [ -e $TRANSACTION_FILE ];then
	echo "Transaction open:"
	cat $TRANSACTION_FILE
    else
	echo "No transaction open"
    fi
    return 0

}

function nova_cvmfs_transaction(){
    local TRANSACTION_FILE=~/.nova_server_transaction
    if [ -e $TRANSACTION_FILE ];then
	echo "Already have an open transaction:" >&2
	cat $TRANSACTION_FILE >&2
	return 1
    else
	date > $TRANSACTION_FILE
	echo "Transaction opened:"
	cat $TRANSACTION_FILE
    fi

    cvmfs_server transaction nova.opensciencegrid.org
}

function nova_cvmfs_publish(){

    local TRANSACTION_FILE=~/.nova_server_transaction
    if [ ! -e $TRANSACTION_FILE ];then
	echo "ERROR - no transaction open" >&2
	return 1
    fi
    cd $HOME
    cvmfs_server publish nova.opensciencegrid.org
    rm $TRANSACTION_FILE

}

function nova_cvmfs_copy_release(){
    if [ "$#" -lt 2 ];then
	echo "Usage: nova_cvmfs_copy_release <release> <os>" >&2
	return 1
    fi

    local release=$1
    local os=$2

    #Check that a transaction is open
    local TRANSACTION_FILE=~/.nova_server_transaction
    if [ ! -e $TRANSACTION_FILE ];then
	echo "ERROR: Transaction not open" >&2
	return 1
    fi

    if [ "$os" == "slf5" ];then
	local remote_dir=/build/nova/novasoft/releases
	local local_dir=/cvmfs/nova.opensciencegrid.org/novasoft/slf5/novasoft/releases

    elif [ "$os" == "slf6" ];then
	local remote_dir=/nova/app/home/novasoft/slf6/build/releases
	local local_dir=/cvmfs/nova.opensciencegrid.org/novasoft/slf6/novasoft/releases

    else
	echo "ERROR: Unkown os $os" >&2
	return 1
    fi

    #Check that remote release tarball exists
    ssh novasoft@novagpvm09 ls ${remote_dir}/${release}.tar &> /dev/null
    local retval=$?
    if [ "$retval" == 0 ];then
	#exists now try copying it
	echo "INFO: Copying tarball \"${release}.tar\" from novagpvm09" >&2
	echo "      to \"${local_dir}\"" >&2
	scp novasoft@novagpvm09:${remote_dir}/${release}.tar ${local_dir}/
	#Now extract it
	cd $local_dir
	if [ -e ${release}.tar ];then
	    echo "INFO: Extracting tarball \"${release}.tar\"" >&2
	    if [ -e ${release} ];then
		echo "WARNING: Release already exists! Skipping extraction" >&2
		return 1
	    fi
	    tar -xf ${release}.tar
	    echo "INFO: Removing tarball" >&2
	    rm ${release}.tar
	fi
    else
	echo "ERROR: Release tarball not present on buildmachine at \"novasoft@novagpvm09:${remote_dir}/${release}.tar\"" >&2
	echo "INFO : Try using nova_cvmfs_copy_release_from_jenkins <release> <os> <buildnum>" >&2
	return 1
    fi

    return 0
}

function nova_cvmfs_get_jenkins_build_number(){

    if [ "$#" -lt 2 ];then
	echo "Usage: nova_cvmfs_get_jenkins_build_number <release> <os>" >&2
	return 1
    fi


    local release=$1
    local this_os=$2
    if [ "$this_os" == "slf5" ];then
	local remote_dir=/build/nova/novasoft/releases
    elif [ "$this_os" == "slf6" ];then
	local remote_dir=/nova/app/home/novasoft/slf6/build/releases
    else
        echo "ERROR: os \"${this_os}\" is not slf5 or slf6" >&2
        return 1
    fi

    local local_build_record=${HOME}/.jenkins_build_record_${this_os}
    if [ -e $local_build_record ];then
	rm $local_build_record
    fi
    scp novasoft@novabuild01.fnal.gov:${remote_dir}/Jenkins_Downloads/tars/build_record_release $local_build_record
    echo "INFO : Checking build record" >&2

    if [ -e $local_build_record ];then
	cat $local_build_record | grep $release 1>&2
	rm $local_build_record
    else
	echo "ERROR: Couldn't get the build record from GPVM node" >&2
    fi


}

function nova_cvmfs_copy_release_from_jenkins(){
    if [ "$#" -lt 3 ];then
	echo "Usage: nova_cvmfs_copy_release_from_jenkins <release> <os> <buildnum>" >&2
	return 1
    fi

    local this_origin=$PWD
    local release=$1
    local this_os=$2
    local THIS_OS=`echo $this_os | tr '[:lower:]' '[:upper:]'`
    local buildnum=$3
    
    #Check that a transaction is open
    local TRANSACTION_FILE=~/.nova_server_transaction
    if [ ! -e $TRANSACTION_FILE ];then
	echo "ERROR: Transaction not open" >&2
	return 1
    fi
    if [ "$this_os" == "slf5" ];then
	local local_dir=/cvmfs/nova.opensciencegrid.org/novasoft/slf5/novasoft/releases
    elif [ "$this_os" == "slf6" ];then
	local local_dir=/cvmfs/nova.opensciencegrid.org/novasoft/slf6/novasoft/releases
    else
        echo "ERROR: os \"${this_os}\" is not slf5 or slf6" >&2
        return 1
    fi
    
    if [ -e ${local_dir}/${release} ];then
        echo "ERROR: Release already exists \"${local_dir}/${release}\"" >&2
        return 1
    fi

    local URL_BASE=https://buildmaster.fnal.gov/view/Nova/job/nova_SRT_${this_os}_release_build_output/${buildnum}/artifact/buildout
    for build in debug maxopt;
      do
      local tarball=novabuild.${release}.${THIS_OS}.${build}.tar.bz2
      echo "INFO : Getting tarball \"${tarball}\"" >&2
      echo "       from URL_BASE \"${URL_BASE}\"" >&2
      echo "INFO : Destination \"${local_dir}\"" >&2
      if [ -e ${local_dir}/${tarball} ];then
          echo "ERROR: Tarball already exists \"${local_dir}/${tarball}\"" >&2
          return 1
      fi

      cd $local_dir
      wget --no-check-certificate ${URL_BASE}/${tarball}
      local RETVAL=$?
      if [ "$RETVAL" != 0 ];then
          echo "ERROR: Problem downloading tarball" >&2
          cd $this_origin
          return 1
      fi
      echo "INFO : Unzipping the tarball" >&2
      tar -xjf $tarball
      echo "INFO : Removing tarball" >&2
      rm  $tarball
      echo "" >&2
      cd $this_origin
    done;

}
