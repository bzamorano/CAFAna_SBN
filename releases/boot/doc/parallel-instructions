New parallel build options in SoftRelTools:

SoftRelTools now supports two kinds of parallel building:

1) Parallel builds within a package. Only one stage of one package
will be built at a time. The components of each package.stage will be
built in parallel. If, for example, the lib stage of a package needs
to compile three independent source files, those compilations will be
done in parallel.

Interface:
    gmake PARALLEL=true
(The PARALLEL variable is only checked via ifdef, so any value will
do.)

Modifiers:
    gmake PARALLEL=true MAXLOAD=5
will tell make to launch new threads only if the load on the machine
is less than 5. (Hint: other numbers will work, too.)

Implementation details:
    PARALLEL and MAXLOAD use the make options -j and -l,
    respectively. For more information, please see the GNU Make
    documentation.
    
2) Parallel builds at the top level, i.e., of the packages themselves.
If the release contains packages A, B and C, then
    A.codegen, B.codegen and C.codegen
will be built simultaneously. Then (and only then)
    A.include, B.include and C.include
will be built simultaneously, etc. The actual stages are still
controlled by the all_deps variable.

Interface:
    gmake -j PARALLEL_TOP=true
(The PARALLEL_TOP variable is only checked via ifdef, so any value
will do.) BOTH THE -j FLAG AND THE PARALLEL_TOP VARIABLE MUST BE
SPECIFIED. EITHER ONE BY ITSELF WILL GENERATE INCONSISTENT RESULTS.
That particular bit of interface is horrible, but the current
implementation of GNU Make doesn't allow for a workaround.

Modifiers:
    gmake -j --max-load=5 PARALLEL_TOP=true
  or
    gmake -j -l 5 PARALLEL_TOP=true
will tell make to launch new threads only if the load on the machine
is less than 5. (Hint: other numbers will work, too.)

Notes:
    a) PARALLEL_TOP sets the USE_LOG_DIR variable. See the file
    top-level-build-instructions in SoftRelTools/doc. Without
    USE_LOG_DIR, the output of parallel builds is incomprehensible.
    
    b) PARALLEL_TOP sets the PREVIOUS_STAGES variable. See the file
    top-level-build-instructions in SoftRelTools/doc.
    
    c) (a) and (b) can be modified by overriding the variables on the
    command line. For example, to do a parallel build of just the bin
    stage, do
        gmake -j PREVIOUS_STAGES= PARALLEL_TOP=true bin

    d) "gmake all", or just plain "gmake" builds the list of stages
    specified in all_deps. It may be desirable to have a different
    list of stages built during a parallel build. The variable
    all_deps_parallel, if defined, will be used in place of all_deps
    during a PARALEL_TOP build. If needed, all_deps_parallel should
    be defined in SRT_$SRT_PROJECT/special/common.mk.

    e) If catchall libs are actively being used, parallel builds are
    likely to break. (To the best of my knowledge, catchall libs are
    being used at both CDF and D0.) The new target libobjects should
    be built before lib if catchall libs are in use. (Thanks to Paul
    Russo for this solution.) See Note (d).
    
    For more information on catchall libs and how to get rid of them,
    see the file multi-dir-lib-instructions in SoftRelTools/doc. Also
    see the SoftRelTools manual and the example package BigLib.

    f) The two types of parallel builds can be mixed.
        gmake -j PARALLEL_TOP=true PARALLEL=true
    will maximize parallelism.
    
    g) There are an arbitrarily large number of ways packages can
    break themselves under parallel builds. PARALLEL_TOP is much less
    likely to expose these problems than PARALLEL.
    
    h) If a few packages need to be ordered such that, e.g., A.lib
    must be built before C.lib and D.lib, adding a line
        C.lib D.lib: A.lib
    to SRT_$SRT_PROJECT/special/post_GNUmakefile.main will solve the
    problem.
    
    
